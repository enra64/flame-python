________________________

cluster_construction.py
________________________

  Construct a vector describing the cluster memberships

  :param fuzzyship: fuzzy membership vector
  :param cluster_supporting_objects: objects with density higher than all their neighbors
  :param cluster_outliers:  objects with density lower than all their neighbors, and lower than a predefined threshold
  :param the_rest: objects not assigned to one of the previous groups
  :return: a vector where at index i is the index of the cluster the object belongs to

________________________

fuzzy_approximation.py
________________________

  Approximate the fuzzy memberships of each data item

  :param data: a numpy-matrix. each column represents an attribute each row a data item
  :param iterations: number of updates based on membership of nearest neighbors
  :param cluster_supporting_objects: objects with density higher than all its neighbors
  :param cluster_outliers: objects with density lower than all its neighbors, and lower than a predefined threshold
  :param the_rest: objects not assigned to one of the previous groups
  :param distance_matrix: a matrix of distances between data points from structure_information_extraction
  :param knn_graph: neighbours with the same distance as the k-nearest-neighbour
  :return: a tuple of lists: fuzzyship and from structure_information_extraction (cluster supporting objects, cluster outliers, rest),
      where each list contains the indices of the objects in the data matrix
      * fuzzyship: object with relative membership to each cso
      * cluster_supporting_objects (CSO): object with density higher than all its neighbors
      * cluster_outliers: object with density lower than all its neighbors, and lower than a predefined threshold
      * the_rest: object not assigned to one of the previous groups
________________________

main.py
________________________

  Main function. Coordinates the two phases required by the algorithm

  :param data: a numpy-matrix. each column represents an attribute; each row a data item
  :param k: the amount of neighbours to use for the initial knn graph
  :param outlier_threshold: the maximum density an outlier can have
  :param distance_measure: a str describing the distance measure:
      ‘braycurtis’,
      ‘canberra’,
      ‘chebyshev’,
      ‘cityblock’,
      ‘correlation’,
      ‘cosine’,
      ‘dice’,
      ‘euclidean’,
      ‘hamming’,
      ‘jaccard’,
      ‘kulsinski’,
      ‘mahalanobis’,
      ‘matching’,
      ‘minkowski’,
      ‘rogerstanimoto’,
      ‘russellrao’,
      ‘seuclidean’,
      ‘sokalmichener’,
      ‘sokalsneath’,
      ‘sqeuclidean’,
      ‘yule’
  :param iterations: number of updates based on membership of nearest neighbors
  :param minkowski_p: The p-norm to apply. Mandatory for Minkowski distance. Ignored otherwise.
  :return: a list of labels: a vector where at index i is the index of the cluster the object belongs to
________________________

structure_information_extraction.py
________________________

  Extract structure information from the dataset

  :param data: a numpy-matrix. each column represents an attribute; each row a data item
  :param k: the amount of neighbours to use for the initial knn graph
  :param outlier_threshold: the maximum density an outlier can have
  :param distance_measure: a str describing the distance measure:
      ‘braycurtis’,
      ‘canberra’,
      ‘chebyshev’,
      ‘cityblock’,
      ‘correlation’,
      ‘cosine’,
      ‘dice’,
      ‘euclidean’,
      ‘hamming’,
      ‘jaccard’,
      ‘kulsinski’,
      ‘mahalanobis’,
      ‘matching’,
      ‘minkowski’,
      ‘rogerstanimoto’,
      ‘russellrao’,
      ‘seuclidean’,
      ‘sokalmichener’,
      ‘sokalsneath’,
      ‘sqeuclidean’,
      ‘yule’
  :param minkowski_p: The p-norm to apply. Mandatory for un/weighted Minkowski distance
  :param weighted_minkowski_weights: The weight vector. Mandatory for weighted Minkowski
  :return: a tuple of lists: (cluster supporting objects, cluster outliers, rest),
      where each list contains the indices of the objects in the data matrix
      * Cluster Supporting Object (CSO): object with density higher than all its neighbors
      * Cluster Outliers: object with density lower than all its neighbors, and lower than a predefined threshold
      * Rest Object: object not assigned to one of the previous groups
      * Distance matrix: a matrix of distances between data points
        * K-Nearest neighbours: a python list of numpy arrays of the nearest neighbours of each element
